!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Allow	zlg_protocol.h	/^	Allow = 0x01,$/;"	e	enum:ackCmd
BACKLOG	listener.c	44;"	d	file:
BUFFER_LEN	serial.c	38;"	d	file:
Bxx2baudrate	serial.c	/^static INT32 Bxx2baudrate (INT32 _baudrate)$/;"	f	file:
CC	Makefile	/^CC = arm-none-linux-gnueabi-gcc$/;"	m
CH_BITS	serial.c	36;"	d	file:
CH_TO_WAIT	serial.c	35;"	d	file:
ClearList	dul_link_list.c	/^Status ClearList(DuLinkList L) \/* 不改变L *\/$/;"	f
CloseComPort	serial.c	/^void CloseComPort ()$/;"	f
DEV_NAME	uart_raw.c	10;"	d	file:
DestroyList	dul_link_list.c	/^Status DestroyList(DuLinkList *L)$/;"	f
DuLNode	dul_link_list.h	/^typedef struct DuLNode$/;"	s
DuLNode	dul_link_list.h	/^}DuLNode,*DuLinkList;$/;"	t	typeref:struct:DuLNode
DuLinkList	dul_link_list.h	/^}DuLNode,*DuLinkList;$/;"	t	typeref:struct:DuLNode
ERROR	dul_link_list.h	8;"	d
EXEC	Makefile	/^EXEC = gateway$/;"	m
ElemType	dul_link_list.h	/^typedef ctl_cmd_t *ElemType;$/;"	t
FALSE	dul_link_list.h	5;"	d
GetElem	dul_link_list.c	/^Status GetElem(DuLinkList L,int i,ElemType *e)$/;"	f
GetElemP	dul_link_list.c	/^DuLinkList GetElemP(DuLinkList L,int i) \/* 另加 *\/$/;"	f
INT16	serial.h	/^typedef short   INT16;$/;"	t
INT32	serial.h	/^typedef int     INT32;$/;"	t
INT8	serial.h	/^typedef char    INT8;$/;"	t
InitList	dul_link_list.c	/^Status InitList(DuLinkList *L)$/;"	f
LEN	main.c	16;"	d	file:
LENGTH	listener.c	45;"	d	file:
ListDelete	dul_link_list.c	/^Status ListDelete(DuLinkList L,int i,ElemType *e) \/* 算法2.19 *\/$/;"	f
ListEmpty	dul_link_list.c	/^Status ListEmpty(DuLinkList L)$/;"	f
ListInsert	dul_link_list.c	/^Status ListInsert(DuLinkList L,int i,ElemType e) \/* 改进算法2.18 *\/$/;"	f
ListLength	dul_link_list.c	/^int ListLength(DuLinkList L)$/;"	f
ListTraverse	dul_link_list.c	/^void ListTraverse(DuLinkList L,void(*visit)(ElemType))$/;"	f
ListTraverseBack	dul_link_list.c	/^void ListTraverseBack(DuLinkList L,void(*visit)(ElemType))$/;"	f
LocateElem	dul_link_list.c	/^int LocateElem(DuLinkList L,ElemType e,Status(*compare)(ElemType,ElemType))$/;"	f
N	ctl_cmd_cache.c	6;"	d	file:
NextElem	dul_link_list.c	/^Status NextElem(DuLinkList L,ElemType cur_e,ElemType *next_e)$/;"	f
OBJS	Makefile	/^OBJS = main.o uart_hal.o listener.o zlg_cmd.o gpio.o serial.o menu.o zlg_protocol.o ota.o server_duty.o xbee_api.o xbee_protocol.o xbee_routine.o xbee_atcmd.o dul_link_list.o ctl_cmd_cache.o parking_state_management.o$/;"	m
OK	dul_link_list.h	6;"	d
OVERFLOW	dul_link_list.h	7;"	d
OpenComPort	serial.c	/^INT32 OpenComPort (INT32 ComPort, INT32 baudrate, INT32 databit,$/;"	f
PORT	listener.c	43;"	d	file:
PriorElem	dul_link_list.c	/^Status PriorElem(DuLinkList L,ElemType cur_e,ElemType *pre_e)$/;"	f
ReadComPort	serial.c	/^INT32 ReadComPort (void *data, INT32 datalength)$/;"	f
ReadComPortA	serial.c	/^INT32 ReadComPortA (void *data, INT32 datalength)$/;"	f
Refuse	zlg_protocol.h	/^	Refuse = 0x00$/;"	e	enum:ackCmd
SERVER_IP	listener.c	41;"	d	file:
SERVER_PORT	listener.c	42;"	d	file:
SRC	Makefile	/^SRC  = main.c uart_hal.c listener.c zlg_cmd.c gpio.c serial.c menu.c zlg_protocol.c ota.c server_duty.c xbee_api.c xbee_protocol.c xbee_routine.c xbee_atcmd.c dul_link_list.c ctl_cmd_cache.c parking_state_management.c$/;"	m
Status	dul_link_list.h	/^typedef int 	Status;$/;"	t
TIMEOUT_SEC	serial.c	32;"	d	file:
TIMEOUT_USEC	serial.c	33;"	d	file:
TRUE	dul_link_list.h	4;"	d
UINT16	serial.h	/^typedef unsigned short UINT16;$/;"	t
UINT8	serial.h	/^typedef unsigned char UINT8;$/;"	t
UNIT32	serial.h	/^typedef unsigned int UNIT32;$/;"	t
WriteComPort	serial.c	/^INT32 WriteComPort (UINT8 * data, INT32 datalength)$/;"	f
_OTA_H__	ota.h	2;"	d
_SERIAL_H	serial.h	2;"	d
__CTL_CMD_CACHE__	ctl_cmd_cache.h	2;"	d
__DUL_LINK_LIST__	dul_link_list.h	2;"	d
__GPIO_H__	gpio.h	2;"	d
__LISTENER_H__	listener.h	2;"	d
__MENU_H__	menu.h	2;"	d
__PARKING_STATE_MANAGEMENT_H__	parking_state_management.h	2;"	d
__SERVER_DUTY_H_	server_duty.h	2;"	d
__UART_HAL_H__	uart_hal.h	2;"	d
__UART_RAW__	uart_raw.h	2;"	d
__USE_ZM516X__	main.c	22;"	d	file:
__XBEE_API__	xbee_api.h	2;"	d
__XBEE_AT_CMD_H__	xbee_atcmd.h	2;"	d
__XBEE_PROTOCOL_H__	xbee_protocol.h	2;"	d
__XBEE_ROUTINE_H__	xbee_routine.h	2;"	d
__ZLG_CMD_H__	zlg_cmd.h	2;"	d
__ZLG_PROTOCOL_H__	zlg_protocol.h	2;"	d
_cmd	dul_link_list.h	/^typedef struct _cmd{$/;"	s
_dev_info_t	zlg_cmd.h	/^typedef struct _dev_info_t {$/;"	s
_search_info_t	zlg_cmd.h	/^typedef struct _search_info_t { $/;"	s
ackCmd	zlg_protocol.h	/^typedef enum ackCmd {$/;"	g
ackCmd_t	zlg_protocol.h	/^}ackCmd_t;$/;"	t	typeref:enum:ackCmd
ackNoControlCmd	zlg_protocol.c	/^void ackNoControlCmd(unsigned short DstAddr)$/;"	f
ackRegisterNetwork	zlg_protocol.c	/^void ackRegisterNetwork(unsigned short NetAddress,ackCmd_t cmd,unsigned short panid,unsigned char channel)$/;"	f
addr	dul_link_list.h	/^	unsigned short addr;$/;"	m	struct:_cmd
addr_server	listener.c	/^struct sockaddr_in addr_server;$/;"	v	typeref:struct:sockaddr_in
addr_server	listener.h	/^struct sockaddr_in addr_server;$/;"	v	typeref:struct:sockaddr_in
addresses	zlg_protocol.c	/^const unsigned short addresses[20];$/;"	v
baudrate2Bxx	serial.c	/^static INT32 baudrate2Bxx (INT32 baudrate)$/;"	f	file:
beep_cmd	zlg_protocol.h	/^enum beep_cmd {$/;"	g
broadcast	zlg_cmd.h	/^    broadcast = 0x01$/;"	e	enum:__anon5
broadcastAddr	zlg_cmd.c	/^const unsigned short broadcastAddr = 0xffff;$/;"	v
cast_mode_t	zlg_cmd.h	/^}cast_mode_t;$/;"	t	typeref:enum:__anon5
cfg_cmd	zlg_protocol.h	/^enum cfg_cmd {$/;"	g
channel	zlg_cmd.h	/^    unsigned char channel;$/;"	m	struct:_search_info_t
cmd	dul_link_list.h	/^	unsigned char  cmd;$/;"	m	struct:_cmd
cmdAckCheckIn	zlg_protocol.h	/^	cmdAckCheckIn = 0x01,$/;"	e	enum:cfg_cmd
cmdAckLinkTest	zlg_protocol.h	/^	cmdAckLinkTest = 0x07,$/;"	e	enum:cfg_cmd
cmdBatteryRemainReport	zlg_protocol.h	/^    	cmdBatteryRemainReport = 0x02$/;"	e	enum:sen_cmd
cmdBeepTest	zlg_protocol.h	/^	cmdBeepTest = 0x00,$/;"	e	enum:tst_cmd
cmdBuzz	zlg_protocol.h	/^	cmdBuzz = 0x01$/;"	e	enum:beep_cmd
cmdCheckIn	zlg_protocol.h	/^	cmdCheckIn = 0x00,$/;"	e	enum:cfg_cmd
cmdDataRequest	zlg_protocol.h	/^	cmdDataRequest = 0x0A$/;"	e	enum:cfg_cmd
cmdEventReport	zlg_protocol.h	/^    	cmdEventReport = 0x01,$/;"	e	enum:sen_cmd
cmdForward	zlg_protocol.h	/^	cmdForward = 0x01,$/;"	e	enum:motor_cmd
cmdHeartBeatPkg	zlg_protocol.h	/^	cmdHeartBeatPkg = 0x09,$/;"	e	enum:cfg_cmd
cmdLedTest	zlg_protocol.h	/^	cmdLedTest = 0x01,$/;"	e	enum:tst_cmd
cmdLinkTest	zlg_protocol.h	/^	cmdLinkTest = 0x06,$/;"	e	enum:cfg_cmd
cmdMotorTest	zlg_protocol.h	/^	cmdMotorTest = 0x02$/;"	e	enum:tst_cmd
cmdRestoreFactoryConfig	zlg_protocol.h	/^	cmdRestoreFactoryConfig = 0x08,$/;"	e	enum:cfg_cmd
cmdReverse	zlg_protocol.h	/^	cmdReverse = 0x02$/;"	e	enum:motor_cmd
cmdSensorCalibration	zlg_protocol.h	/^	cmdSensorCalibration = 0x00,$/;"	e	enum:sen_cmd
cmdSilence	zlg_protocol.h	/^	cmdSilence = 0x00,$/;"	e	enum:beep_cmd
cmdStop	zlg_protocol.h	/^	cmdStop = 0x00,$/;"	e	enum:motor_cmd
communicate_thread	zlg_protocol.c	/^void communicate_thread(void)$/;"	f
compareElemAddr	ctl_cmd_cache.c	/^int compareElemAddr(ctl_cmd_t *a,ctl_cmd_t *b)$/;"	f
crc16	ota.c	/^static unsigned short crc16(unsigned short crc, unsigned char val)$/;"	f	file:
ctl_cmd_t	dul_link_list.h	/^}ctl_cmd_t;$/;"	t	typeref:struct:_cmd
data	dul_link_list.h	/^	ElemType data;$/;"	m	struct:DuLNode
depot_id	parking_state_management.c	/^    int depot_id;$/;"	m	struct:__anon3	file:
depot_info	parking_state_management.c	/^static depot_info_t *depot_info;$/;"	v	file:
depot_info_t	parking_state_management.c	/^}depot_info_t;$/;"	t	typeref:struct:__anon3	file:
depot_size	parking_state_management.c	/^    int depot_size;$/;"	m	struct:__anon3	file:
devChannel	zlg_cmd.h	/^    unsigned char devChannel;$/;"	m	struct:_dev_info_t
devDestIEEEAddr	zlg_cmd.h	/^    unsigned char devDestIEEEAddr[8];$/;"	m	struct:_dev_info_t
devDestNetAddr	zlg_cmd.h	/^    unsigned char devDestNetAddr[2];$/;"	m	struct:_dev_info_t
devLoacalIEEEAddr	zlg_cmd.h	/^    unsigned char devLoacalIEEEAddr[8];$/;"	m	struct:_dev_info_t
devLoacalNetAddr	zlg_cmd.h	/^    unsigned char devLoacalNetAddr[2];$/;"	m	struct:_dev_info_t
devMode	zlg_cmd.h	/^    unsigned char devMode;$/;"	m	struct:_dev_info_t
devName	zlg_cmd.h	/^    unsigned char devName[16];$/;"	m	struct:_dev_info_t
devPanid	zlg_cmd.h	/^    unsigned char devPanid[2];$/;"	m	struct:_dev_info_t
devPowerLevel	zlg_cmd.h	/^    unsigned char devPowerLevel;$/;"	m	struct:_dev_info_t
devPwd	zlg_cmd.h	/^    unsigned char devPwd[16];$/;"	m	struct:_dev_info_t
devReserve1	zlg_cmd.h	/^    unsigned char devReserve1;$/;"	m	struct:_dev_info_t
devReserve2	zlg_cmd.h	/^    unsigned char devReserve2;$/;"	m	struct:_dev_info_t
devRetryNum	zlg_cmd.h	/^    unsigned char devRetryNum;$/;"	m	struct:_dev_info_t
devSerialDataB	zlg_cmd.h	/^    unsigned char devSerialDataB;$/;"	m	struct:_dev_info_t
devSerialParityB	zlg_cmd.h	/^    unsigned char devSerialParityB;$/;"	m	struct:_dev_info_t
devSerialRate	zlg_cmd.h	/^    unsigned char devSerialRate;$/;"	m	struct:_dev_info_t
devSerialStopB	zlg_cmd.h	/^    unsigned char devSerialStopB;$/;"	m	struct:_dev_info_t
devTranTimeout	zlg_cmd.h	/^    unsigned char devTranTimeout;       \/\/ *10ms$/;"	m	struct:_dev_info_t
devTypeCmd	zlg_protocol.h	/^typedef enum devTypeCmd {$/;"	g
devTypeCmd_t	zlg_protocol.h	/^}devTypeCmd_t;$/;"	t	typeref:enum:devTypeCmd
dev_info_t	zlg_cmd.h	/^}dev_info_t;$/;"	t	typeref:struct:_dev_info_t
deviceType	zlg_cmd.h	/^    unsigned char deviceType[2];$/;"	m	struct:_search_info_t
enEnterSleepMode	zlg_cmd.h	/^    enEnterSleepMode = 0xd8,$/;"	e	enum:temporaryparamoptcmd
enGetRemoteInfo	zlg_cmd.h	/^    enGetRemoteInfo = 0xd5,$/;"	e	enum:nvparamoptcmd
enModifyCfg	zlg_cmd.h	/^    enModifyCfg = 0xd6,$/;"	e	enum:nvparamoptcmd
enOffline	parking_state_management.c	/^    enOffline = 0$/;"	e	enum:__anon2	file:
enOnline	parking_state_management.c	/^    enOnline = 1,$/;"	e	enum:__anon2	file:
enReadAdcValue	zlg_cmd.h	/^    enReadAdcValue = 0xd7,$/;"	e	enum:temporaryparamoptcmd
enReadIoStatus	zlg_cmd.h	/^    enReadIoStatus = 0xd5,$/;"	e	enum:temporaryparamoptcmd
enReadLoacalCfg	zlg_cmd.h	/^    enReadLoacalCfg = 0xd1,$/;"	e	enum:nvparamoptcmd
enReadNodeRssi	zlg_cmd.h	/^    enReadNodeRssi = 0xda$/;"	e	enum:temporaryparamoptcmd
enResetCfg	zlg_cmd.h	/^    enResetCfg = 0xda$/;"	e	enum:nvparamoptcmd
enResetNode	zlg_cmd.h	/^    enResetNode = 0xd9,$/;"	e	enum:nvparamoptcmd
enSearchNode	zlg_cmd.h	/^    enSearchNode = 0xd4,$/;"	e	enum:nvparamoptcmd
enSetChannel	zlg_cmd.h	/^    enSetChannel = 0xd1,$/;"	e	enum:temporaryparamoptcmd
enSetChannelNv	zlg_cmd.h	/^    enSetChannelNv = 0xd2,$/;"	e	enum:nvparamoptcmd
enSetDestAddr	zlg_cmd.h	/^    enSetDestAddr = 0xd2,$/;"	e	enum:temporaryparamoptcmd
enSetIoDirection	zlg_cmd.h	/^    enSetIoDirection = 0xd4,$/;"	e	enum:temporaryparamoptcmd
enSetIoStatus	zlg_cmd.h	/^    enSetIoStatus = 0xd6,$/;"	e	enum:temporaryparamoptcmd
enSetUnicastOrBroadcast	zlg_cmd.h	/^    enSetUnicastOrBroadcast = 0xd9,$/;"	e	enum:temporaryparamoptcmd
enShowSrcAddr	zlg_cmd.h	/^    enShowSrcAddr = 0xd3,$/;"	e	enum:temporaryparamoptcmd
en_lock_failed	server_duty.h	/^    en_lock_failed,$/;"	e	enum:__anon6
en_lock_success	server_duty.h	/^    en_lock_success,$/;"	e	enum:__anon6
en_max_event	server_duty.h	/^    en_max_event$/;"	e	enum:__anon6
en_netState	parking_state_management.c	/^}en_netState;$/;"	t	typeref:enum:__anon2	file:
en_order_lock	server_duty.h	/^    en_order_lock = 0x01,$/;"	e	enum:__anon7
en_order_unlock	server_duty.h	/^    en_order_unlock = 0x00$/;"	e	enum:__anon7
en_parkingEvent	server_duty.h	/^}en_parkingEvent,*pen_parkingEvent;$/;"	t	typeref:enum:__anon6
en_parking_order	server_duty.h	/^}en_parking_order;$/;"	t	typeref:enum:__anon7
en_parking_state	parking_state_management.c	/^}en_parking_state;$/;"	t	typeref:enum:__anon1	file:
en_parking_state_max	parking_state_management.c	/^    en_parking_state_max = 0xff$/;"	e	enum:__anon1	file:
en_parking_state_report	server_duty.h	/^}en_parking_state_report;$/;"	t	typeref:enum:__anon8
en_state_lock	server_duty.h	/^    en_state_lock = 0x02,$/;"	e	enum:__anon8
en_state_unlock	server_duty.h	/^    en_state_unlock = 0x04$/;"	e	enum:__anon8
en_unlock_failed	server_duty.h	/^    en_unlock_failed,$/;"	e	enum:__anon6
en_unlock_success	server_duty.h	/^    en_unlock_success,$/;"	e	enum:__anon6
en_vehicle_comming	server_duty.h	/^    en_vehicle_comming,$/;"	e	enum:__anon6
en_vehicle_leave	server_duty.h	/^    en_vehicle_leave,$/;"	e	enum:__anon6
endDevice	zlg_protocol.h	/^	endDevice = 0x00,$/;"	e	enum:devTypeCmd
enter_sleep_mode	zlg_cmd.c	/^void enter_sleep_mode(void)$/;"	f
event	parking_state_management.h	/^    en_parkingEvent event;$/;"	m	struct:__anon9
event_report	parking_state_management.c	/^void event_report(unsigned short netaddr,unsigned char event)$/;"	f
event_string	parking_state_management.c	/^char * const event_string[en_max_event] = {"en_vehicle_comming\\r\\n","en_vehicle_leave\\r\\n","en_lock_success\\r\\n","en_lock_failed\\r\\n","en_unlock_success\\r\\n","en_unlock_failed\\r\\n"};$/;"	v
fd	serial.c	/^static INT32    fd;             \/\/File descriptor for the port$/;"	v	file:
fd1	gpio.c	/^int fd1,fd2,fd3,fd4,fd5;$/;"	v
fd2	gpio.c	/^int fd1,fd2,fd3,fd4,fd5;$/;"	v
fd3	gpio.c	/^int fd1,fd2,fd3,fd4,fd5;$/;"	v
fd4	gpio.c	/^int fd1,fd2,fd3,fd4,fd5;$/;"	v
fd5	gpio.c	/^int fd1,fd2,fd3,fd4,fd5;$/;"	v
fireware_file_path	ota.c	15;"	d	file:
freetime	server_duty.c	/^unsigned short freetime = 1;$/;"	v
fs_read	serial.c	/^static fd_set   fs_read, fs_write;$/;"	v	file:
fs_write	serial.c	/^static fd_set   fs_read, fs_write;$/;"	v	file:
getCtlAddres	ctl_cmd_cache.c	/^int getCtlAddres(const unsigned short *addres,unsigned char *num)$/;"	f
getCtlCmd	ctl_cmd_cache.c	/^int getCtlCmd(const unsigned short address,unsigned char *cmd)$/;"	f
getPortFd	serial.c	/^int getPortFd(){$/;"	f
get_all_parking_state	parking_state_management.c	/^int get_all_parking_state(unsigned char* buf)$/;"	f
get_baudrate	serial.c	/^static INT32 get_baudrate ()$/;"	f	file:
get_channel_panid	server_duty.c	/^void get_channel_panid(unsigned char* channel,unsigned short*panid)$/;"	f
get_depot_id	parking_state_management.c	/^int get_depot_id(void)$/;"	f
get_depot_size	parking_state_management.c	/^int get_depot_size(void)$/;"	f
get_local_addr	parking_state_management.c	/^int get_local_addr(unsigned char *local_addr,unsigned char* long_addr)$/;"	f
get_remote_info	zlg_cmd.c	/^void get_remote_info(unsigned short DstAddr)$/;"	f
gpio_init	gpio.c	/^void gpio_init(void)$/;"	f
iEEEAddress	zlg_protocol.c	/^unsigned char iEEEAddress[8];$/;"	v
iFd	uart_raw.c	/^int iFd;$/;"	v
initCtlCmdCache	ctl_cmd_cache.c	/^int initCtlCmdCache(void)$/;"	f
init_zlg_zm516x	zlg_cmd.c	/^void init_zlg_zm516x(void)$/;"	f
keep_wake_node	zlg_protocol.c	/^void keep_wake_node(void)$/;"	f
list_mux	ctl_cmd_cache.c	/^pthread_mutex_t list_mux;$/;"	v
localAddr	zlg_cmd.h	/^    unsigned char localAddr[2];$/;"	m	struct:_search_info_t
mac2str	zlg_protocol.c	/^void mac2str(char *str,const char *ieeeAddress)$/;"	f
mac_addr	server_duty.c	/^static const unsigned char mac_addr[8] = {0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8};$/;"	v	file:
main	main.c	/^int main(int argc, char *argv[])$/;"	f
menu	menu.c	/^const char menu[] = "\\r\\n\\$/;"	v
menu_thread	menu.c	/^void menu_thread(void)$/;"	f
motor_cmd	zlg_protocol.h	/^enum motor_cmd {$/;"	g
mut	serial.c	/^pthread_mutex_t mut;$/;"	v
n_com_port	zlg_cmd.c	/^static int n_com_port = ttyO1;$/;"	v	file:
need_to_send_to_sever	parking_state_management.c	/^unsigned char need_to_send_to_sever = 1;$/;"	v
need_to_send_to_sever	parking_state_management.h	/^unsigned char need_to_send_to_sever;$/;"	v
netNum	zlg_cmd.h	/^    unsigned char netNum[2];$/;"	m	struct:_search_info_t
net_id	parking_state_management.c	/^    unsigned short net_id;$/;"	m	struct:__anon3	file:
networking_over	parking_state_management.c	/^int networking_over(void)$/;"	f
next	dul_link_list.h	/^	struct DuLNode *prior,*next;	$/;"	m	struct:DuLNode	typeref:struct:DuLNode::
nvparamoptcmd	zlg_cmd.h	/^enum nvparamoptcmd{$/;"	g
offline_time_out	parking_state_management.h	/^    time_t offline_time_out;$/;"	m	struct:__anon9
online	parking_state_management.h	/^    unsigned char online;$/;"	m	struct:__anon9
ota_begin	ota.c	/^sem_t ota_begin;$/;"	v
ota_over	ota.c	/^sem_t ota_over;$/;"	v
ota_thread	ota.c	/^void ota_thread(void)$/;"	f
parking_id	parking_state_management.h	/^    unsigned short parking_id;$/;"	m	struct:__anon9
parking_id_macaddr_mapping	parking_state_management.c	/^void parking_id_macaddr_mapping(unsigned short parking_id,unsigned char *macaddr)$/;"	f
parking_info_mutex	parking_state_management.c	/^pthread_mutex_t parking_info_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
parking_info_mutex	parking_state_management.h	/^pthread_mutex_t parking_info_mutex;$/;"	v
parking_init	parking_state_management.c	/^void parking_init(void)$/;"	f
parking_mac_addr	parking_state_management.h	/^    unsigned char parking_mac_addr[8];$/;"	m	struct:__anon9
parking_online_string	parking_state_management.c	/^char* const parking_online_string[2] = {$/;"	v
parking_state_booked_coming	parking_state_management.c	/^    parking_state_booked_coming = 0x82, \/\/ 被预定车位解锁，车主到达现场$/;"	e	enum:__anon1	file:
parking_state_booked_coming_lock	parking_state_management.c	/^    parking_state_booked_coming_lock = 0x21, \/\/ 被预定车位，车到达，已上锁$/;"	e	enum:__anon1	file:
parking_state_booked_coming_lock_failed	parking_state_management.c	/^    parking_state_booked_coming_lock_failed = 0x22, \/\/ 被预定车位，车到达，上锁失败$/;"	e	enum:__anon1	file:
parking_state_booked_coming_unlock	parking_state_management.c	/^    parking_state_booked_coming_unlock = 0x1c, \/\/ 被预定车位解锁成功$/;"	e	enum:__anon1	file:
parking_state_booked_coming_unlock_failed	parking_state_management.c	/^    parking_state_booked_coming_unlock_failed = 0x1d, \/\/ 被预定车位解锁失败$/;"	e	enum:__anon1	file:
parking_state_booked_coming_unlock_goto_idle	parking_state_management.c	/^    parking_state_booked_coming_unlock_goto_idle = 0x20,\/\/ 降锁，免费时间内车未到达（即将转为空闲）$/;"	e	enum:__anon1	file:
parking_state_booking	parking_state_management.c	/^    parking_state_booking = 0x81, \/\/ 车位被预定$/;"	e	enum:__anon1	file:
parking_state_booking_busy	parking_state_management.c	/^    parking_state_booking_busy = 0x1a, \/\/ 预定车位失败（被抢占）$/;"	e	enum:__anon1	file:
parking_state_booking_lock	parking_state_management.c	/^    parking_state_booking_lock = 0x09, \/\/ 预定成功，且车位已上锁$/;"	e	enum:__anon1	file:
parking_state_booking_lock_failed	parking_state_management.c	/^    parking_state_booking_lock_failed = 0x1b, \/\/ 预定车位，上锁失败（硬件故障）$/;"	e	enum:__anon1	file:
parking_state_check_routin	parking_state_management.c	/^void parking_state_check_routin(void)$/;"	f
parking_state_have_paid	parking_state_management.c	/^    parking_state_have_paid = 0x84, \/\/ 已支付$/;"	e	enum:__anon1	file:
parking_state_have_paid_relock	parking_state_management.c	/^    parking_state_have_paid_relock = 0x23, \/\/ 支付解锁后车未离开重新加锁计费$/;"	e	enum:__anon1	file:
parking_state_have_paid_relock_failed	parking_state_management.c	/^    parking_state_have_paid_relock_failed = 0x24, \/\/ 支付解锁后车未离开重新加锁失败$/;"	e	enum:__anon1	file:
parking_state_have_paid_unlock	parking_state_management.c	/^    parking_state_have_paid_unlock = 0x05, \/\/ 支付后解锁成功$/;"	e	enum:__anon1	file:
parking_state_have_paid_unlock_failed	parking_state_management.c	/^    parking_state_have_paid_unlock_failed = 0x08, \/\/ 支付后解锁硬件异常$/;"	e	enum:__anon1	file:
parking_state_have_paid_unlock_vehicle_leave	parking_state_management.c	/^    parking_state_have_paid_unlock_vehicle_leave = 0x06, \/\/ 支付解锁成功N分钟内车离开$/;"	e	enum:__anon1	file:
parking_state_idle	parking_state_management.c	/^    parking_state_idle = 0x00, \/\/ 空闲$/;"	e	enum:__anon1	file:
parking_state_prestop	parking_state_management.c	/^    parking_state_prestop = 0x01, \/\/ 车来$/;"	e	enum:__anon1	file:
parking_state_report	parking_state_management.c	/^void parking_state_report(unsigned short netaddr, en_parking_state_report enParking_state)$/;"	f
parking_state_stop_lock	parking_state_management.c	/^    parking_state_stop_lock = 0x03, \/\/ 车来超N分钟已上锁$/;"	e	enum:__anon1	file:
parking_state_stop_lock_failed	parking_state_management.c	/^    parking_state_stop_lock_failed = 0x04, \/\/ 车来超N分钟但加锁失败（硬件故障）$/;"	e	enum:__anon1	file:
parking_state_string	parking_state_management.c	/^char* const parking_state_string[en_parking_state_max] = {$/;"	v
parking_state_unbooking	parking_state_management.c	/^    parking_state_unbooking = 0x83, \/\/ 取消预定$/;"	e	enum:__anon1	file:
parking_state_unbooking_unlock	parking_state_management.c	/^    parking_state_unbooking_unlock = 0x1e, \/\/ 取消预定成功已解锁$/;"	e	enum:__anon1	file:
parking_state_unbooking_unlock_failed	parking_state_management.c	/^    parking_state_unbooking_unlock_failed = 0x1f, \/\/ 取消预定失败，硬件故障$/;"	e	enum:__anon1	file:
pen_parkingEvent	server_duty.h	/^}en_parkingEvent,*pen_parkingEvent;$/;"	t	typeref:enum:__anon6
printElem	ctl_cmd_cache.c	/^void printElem(ctl_cmd_t *e)$/;"	f
prior	dul_link_list.h	/^	struct DuLNode *prior,*next;	$/;"	m	struct:DuLNode	typeref:struct:DuLNode::DuLNode
pstParkingState	parking_state_management.c	/^pst_parkingState pstParkingState = NULL;$/;"	v
pstParkingState	parking_state_management.h	/^pst_parkingState pstParkingState;$/;"	v
pst_parkingState	parking_state_management.h	/^}st_parkingState,*pst_parkingState;$/;"	t	typeref:struct:__anon9
putCtlCmd	ctl_cmd_cache.c	/^int putCtlCmd(const unsigned short addr,const unsigned char cmd)$/;"	f
q	ctl_cmd_cache.c	/^DuLinkList q;$/;"	v
rate	zlg_cmd.h	/^    unsigned char rate;$/;"	m	struct:_search_info_t
rbuf	zlg_cmd.c	/^static unsigned char wbuf[100],rbuf[255];$/;"	v	file:
read_local_cfg	zlg_cmd.c	/^void read_local_cfg(void)$/;"	f
read_temporary_adc_value	zlg_cmd.c	/^unsigned short read_temporary_adc_value(unsigned short DstAddr)$/;"	f
read_temporary_io_level	zlg_cmd.c	/^unsigned char read_temporary_io_level(unsigned short DstAddr)$/;"	f
read_temporary_node_rssi	zlg_cmd.c	/^unsigned char read_temporary_node_rssi(unsigned short DstAddr)$/;"	f
reboot_node	zlg_protocol.c	/^void reboot_node(unsigned short DstAddr)\/\/DstAddr = 0xffff,means reboot all node$/;"	f
remoteDevInfo	zlg_cmd.c	/^dev_info_t remoteDevInfo;$/;"	v
requestAddress	zlg_protocol.c	/^unsigned short requestAddress;$/;"	v
reset_node	zlg_cmd.c	/^void reset_node(unsigned short DstAddr)$/;"	f
reset_node_sensor	zlg_protocol.c	/^void reset_node_sensor(unsigned short DstAddr)$/;"	f
reset_params_zm516x	gpio.c	/^void reset_params_zm516x(void)$/;"	f
reset_zm516x	gpio.c	/^void reset_zm516x(void)$/;"	f
restart_all_parking_node	parking_state_management.c	/^int restart_all_parking_node(void)$/;"	f
restoreFactoryConfig	zlg_protocol.c	/^void restoreFactoryConfig(unsigned short DstAddr)$/;"	f
restore_factory_settings	zlg_cmd.c	/^void restore_factory_settings(unsigned short DstAddr)$/;"	f
routerDevice	zlg_protocol.h	/^	routerDevice = 0x01$/;"	e	enum:devTypeCmd
runStatus	zlg_cmd.h	/^    unsigned char runStatus;$/;"	m	struct:_search_info_t
searchInfo	zlg_cmd.c	/^search_info_t searchInfo;$/;"	v
search_info_t	zlg_cmd.h	/^}search_info_t;$/;"	t	typeref:struct:_search_info_t
search_node	zlg_cmd.c	/^void search_node(void)$/;"	f
search_use_netaddr	parking_state_management.c	/^pst_parkingState search_use_netaddr(unsigned short netaddr)$/;"	f
sen_cmd	zlg_protocol.h	/^enum sen_cmd {$/;"	g
send_data_to_remote_node	zlg_cmd.c	/^void send_data_to_remote_node(unsigned short destAddr,unsigned char *data,int len)$/;"	f
sendtonode	ota.c	/^void sendtonode(unsigned short destaddr,unsigned char *data,int len)$/;"	f
serialport_init	zlg_cmd.c	/^void serialport_init(void)$/;"	f
server_duty_thread	server_duty.c	/^void server_duty_thread(void)$/;"	f
set_baudrate	serial.c	/^static void set_baudrate (INT32 baudrate)$/;"	f	file:
set_channel_nv	zlg_cmd.c	/^void set_channel_nv(unsigned char nv)$/;"	f
set_data_bit	serial.c	/^static void set_data_bit (INT32 databit)$/;"	f	file:
set_depot_info	parking_state_management.c	/^void set_depot_info(int depot_id,int depot_size,unsigned char wireless_channel,unsigned short net_id)$/;"	f
set_node_online	parking_state_management.c	/^void set_node_online(unsigned char *macaddr)$/;"	f
set_online	parking_state_management.c	/^void set_online(unsigned short netaddr)$/;"	f
set_parity	serial.c	/^static void set_parity (char parity)$/;"	f	file:
set_parking_state	parking_state_management.c	/^int set_parking_state(unsigned short parking_id,unsigned char state)$/;"	f
set_port_attr	serial.c	/^static INT32 set_port_attr ($/;"	f	file:
set_stopbit	serial.c	/^static void set_stopbit (const char *stopbit)$/;"	f	file:
set_temporary_DestAddr	zlg_cmd.c	/^void set_temporary_DestAddr(unsigned short DestAddr)$/;"	f
set_temporary_ShowSrcAddr	zlg_cmd.c	/^void set_temporary_ShowSrcAddr(showSrcAddr_cmd_t cmd)$/;"	f
set_temporary_cast_mode	zlg_cmd.c	/^void set_temporary_cast_mode(cast_mode_t mode)$/;"	f
set_temporary_channel	zlg_cmd.c	/^void set_temporary_channel(unsigned char channel)$/;"	f
set_temporary_io_dir	zlg_cmd.c	/^void set_temporary_io_dir(unsigned short DstAddr,unsigned char IO_Dir)$/;"	f
set_temporary_io_level	zlg_cmd.c	/^void set_temporary_io_level(unsigned short DstAddr,unsigned char IO_Level)$/;"	f
showSrcAddr_cmd_t	zlg_cmd.h	/^}showSrcAddr_cmd_t;$/;"	t	typeref:enum:__anon4
show_disable	zlg_cmd.h	/^    show_disable = 0x00$/;"	e	enum:__anon4
show_enable	zlg_cmd.h	/^    show_enable = 0x01,$/;"	e	enum:__anon4
sigroutine	parking_state_management.c	/^void sigroutine(int signo)$/;"	f
sleep_zm516x	gpio.c	/^void sleep_zm516x(unsigned char state)$/;"	f
sockfd	listener.c	/^int sockfd;                                                                            $/;"	v
stDevInfo	zlg_cmd.c	/^dev_info_t stDevInfo;$/;"	v
st_parkingState	parking_state_management.h	/^}st_parkingState,*pst_parkingState;$/;"	t	typeref:struct:__anon9
startSensorCalibration	zlg_protocol.c	/^void startSensorCalibration(void)$/;"	f
state	parking_state_management.h	/^    unsigned char state;$/;"	m	struct:__anon9
swap	server_duty.c	/^void swap(unsigned char len,unsigned char *array)$/;"	f
switchLockControl	zlg_protocol.c	/^void switchLockControl(unsigned short DstAddr,unsigned char cmd)$/;"	f
syn_all_parking_node	parking_state_management.c	/^int syn_all_parking_node(void)$/;"	f
syn_node	zlg_protocol.c	/^void syn_node(unsigned short DstAddr)\/\/DstAddr = 0xffff,means reboot all node$/;"	f
tcp_exit	listener.c	/^void tcp_exit(void)$/;"	f
tcp_init	listener.c	/^void tcp_init(void)$/;"	f
tcp_listen	listener.c	/^int tcp_listen(unsigned char *revbuf,int bufsize)$/;"	f
tcp_send_to_server	listener.c	/^int tcp_send_to_server(int len,unsigned char *bytes)$/;"	f
temporaryparamoptcmd	zlg_cmd.h	/^enum temporaryparamoptcmd{$/;"	g
termios_new	serial.c	/^static struct termios termios_old, termios_new;$/;"	v	typeref:struct:	file:
termios_old	serial.c	/^static struct termios termios_old, termios_new;$/;"	v	typeref:struct:termios	file:
testBeep	zlg_protocol.c	/^void testBeep(unsigned short DstAddr,unsigned char cmd)$/;"	f
testLed	zlg_protocol.c	/^void testLed(unsigned short DstAddr,unsigned char ioLevel)$/;"	f
testLink	zlg_protocol.c	/^void testLink(const char * ieeeAddress)$/;"	f
testMotor	zlg_protocol.c	/^void testMotor(unsigned short DstAddr,unsigned char cmd)$/;"	f
test_cmd_thread	main.c	/^void test_cmd_thread(void)$/;"	f
time	parking_state_management.h	/^    time_t time;$/;"	m	struct:__anon9
total_ack_link	zlg_protocol.c	/^int total_ack_link; $/;"	v
total_online_link	parking_state_management.c	/^static int total_online_link;$/;"	v	file:
tst_cmd	zlg_protocol.h	/^enum tst_cmd {$/;"	g
ttyO0	zlg_cmd.c	14;"	d	file:
ttyO1	zlg_cmd.c	15;"	d	file:
ttyO2	zlg_cmd.c	16;"	d	file:
ttyO3	zlg_cmd.c	17;"	d	file:
ttyO4	zlg_cmd.c	18;"	d	file:
ttyO5	zlg_cmd.c	19;"	d	file:
tv_timeout	serial.c	/^static struct timeval tv_timeout;$/;"	v	typeref:struct:timeval	file:
uart_exit	uart_raw.c	/^void uart_exit(void)$/;"	f
uart_init	uart_raw.c	/^void uart_init(void)$/;"	f
uart_rcv_buf	main.c	/^unsigned char uart_rcv_buf[LEN];$/;"	v
uart_read	uart_raw.c	/^int uart_read(unsigned char *buf)$/;"	f
uart_read_thread	main.c	/^void uart_read_thread(void)$/;"	f
uart_test	uart_raw.c	/^void uart_test(void)$/;"	f
uart_write	uart_raw.c	/^void uart_write(unsigned char *buf,int len)$/;"	f
unicast	zlg_cmd.h	/^    unicast = 0x00,$/;"	e	enum:__anon5
wbuf	zlg_cmd.c	/^static unsigned char wbuf[100],rbuf[255];$/;"	v	file:
wireless_channel	parking_state_management.c	/^    unsigned char wireless_channel;$/;"	m	struct:__anon3	file:
write_local_cfg	zlg_cmd.c	/^void write_local_cfg(void)$/;"	f
write_remote_cfg	zlg_cmd.c	/^void write_remote_cfg(unsigned short DstAddr, dev_info_t *DevInfo )$/;"	f
xbee_routine_thread	xbee_routine.c	/^void xbee_routine_thread(void)$/;"	f
